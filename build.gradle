import org.jetbrains.kotlin.gradle.plugin.mpp.KotlinNativeTarget
import org.jetbrains.kotlin.gradle.tasks.KotlinJvmCompile
import org.jetbrains.kotlin.gradle.dsl.JvmTarget

buildscript {
	dependencies {
		classpath libs.kotlin.plugin
		classpath libs.maven.publish.gradlePlugin
		classpath libs.dokka.gradlePlugin
		classpath libs.spotless.gradlePlugin
		classpath libs.binary.compatibility.validator.gradlePlugin
	}
	repositories {
		mavenCentral()
		gradlePluginPortal()
	}
}

apply plugin: 'org.jetbrains.kotlin.multiplatform'
apply plugin: 'org.jetbrains.dokka'
apply plugin: 'com.vanniktech.maven.publish'
apply plugin: 'binary-compatibility-validator'

kotlin {
	jvm()

	linuxArm64()
	linuxX64()

	macosArm64()
	macosX64()

	mingwX64()

	applyDefaultHierarchyTemplate {
		it.common {
			it.group("native") {
				it.group("posix") {
					it.group("linux") {}
					it.group("macos") {}
				}
			}
		}
	}

	explicitApi()

	sourceSets {
		commonMain {
			dependencies {
				api libs.kotlinx.coroutines.core
			}
		}
		commonTest {
			dependencies {
				implementation libs.kotlin.test
				implementation libs.kotlinx.coroutines.test
				implementation libs.assertk
			}
		}
	}

	compilerOptions.freeCompilerArgs.add('-Xexpect-actual-classes')
}

apiValidation {
	klib {
		enabled = true
		strictValidation = true
	}
	// Whhhyyy does this apply itself to all projects automatically?!?
	ignoredProjects += 'test-app'
}

group = GROUP
version = VERSION_NAME

allprojects {
	repositories {
		mavenCentral()
	}

	tasks.withType(JavaCompile).configureEach {
		sourceCompatibility = JavaVersion.VERSION_1_8
		targetCompatibility = JavaVersion.VERSION_1_8
	}

	tasks.withType(KotlinJvmCompile).configureEach {
		compilerOptions.jvmTarget = JvmTarget.JVM_1_8
	}

	apply plugin: 'com.diffplug.spotless'
	spotless {
		kotlin {
			target("src/**/*.kt")
			ktlint(libs.ktlint.core.get().version)
				.editorConfigOverride([
					'ktlint_standard_filename' : 'disabled',
					// Making something an expression body should be a choice around readability.
					'ktlint_standard_function-expression-body': 'disabled',
					'ktlint_standard_property-naming' : 'disabled',
				])
		}
	}
}
